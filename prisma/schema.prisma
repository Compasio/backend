// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//========TABELAS========

model User {
  //CAMPOS DA TABELA
  id Int @id @default(autoincrement())
  email String @unique
  password String

  //RELAÇÕES
  userType UserType @default(voluntier)
  voluntier Voluntier?
  ong Ong?
  ongAssociated OngAssociated?
}

model Voluntier {
  //CAMPOS DA TABELA
  id_voluntier Int
  cpf_voluntier String @unique @db.VarChar(11)
  firstname String @db.VarChar(30)
  lastname String @db.VarChar(50)
  profile_picture Bytes?
  description String? @db.VarChar(200)
  birthDate DateTime

  //RELAÇÕES
  user User? @relation(fields: [id_voluntier], references: [id])
  habilities Habilities_User[]
  voluntierRelations VoluntierRelations[]
  
  @@id([id_voluntier])
}

model Ong {
  //CAMPOS DA TABELA    
  id_ong Int
  cnpj_ong String @unique @db.VarChar(14) @default("00000000000000")
  cpf_founder String @db.VarChar(11)
  ong_name String @db.VarChar(50)
  profile_picture Bytes?
  description String? @db.VarChar(200)

  //RELAÇÕES
  user User? @relation(fields: [id_ong], references: [id])
  themes Themes_ONG[]
  voluntierRelations VoluntierRelations[]
  ongAssociates OngAssociated[]
  projects Project[]

  @@id([id_ong])
}

model OngAssociated {
  //CAMPOS DA TABELA
  id_associate Int
  ong Int
  firstname String @db.VarChar(50)
  lastname String @db.VarChar(70)

  //RELAÇÕES
  user User @relation(fields: [id_associate], references: [id])
  id_ong Ong @relation(fields: [ong], references: [id_ong])
  permissions Permissions[]

  @@id([id_associate])
}

//model UserAppData {
  //CAMPOS DA TABELA
//  id_user Int
  //TODO---TERMINAR TABELA USERAPPDATA

  //RELAÇÕES
//  user User         @relation(fields: [id_user], references: [id_user])

//  @@id([id_user])
//}

model VoluntierRelations {
  //CAMPOS DA TABELA
  id_relation Int @id @default(autoincrement())
  voluntier Int
  ong Int
  project Int //TEMOS QUE DECIDIR SE A ASSOCIAÇÃO A UM PROJETO É OBRIGATÓRIA
  dateStart DateTime
  dateEnding DateTime
  description String? @db.VarChar(200)

  //RELAÇÕES
  id_voluntier Voluntier @relation(fields: [voluntier], references: [id_voluntier])
  id_ong Ong @relation(fields: [ong], references: [id_ong])
  id_project Project @relation(fields: [project], references: [id_project])
}

model Project {
  //RELAÇÕES
  id_project Int @id @default(autoincrement())
  ong Int
  project_name String @db.VarChar(50)
  //TODO---TERMINAR TABELA PROJECTS

  //RELAÇÕES
  voluntierRelations VoluntierRelations[]
  id_ong Ong @relation(fields: [ong], references: [id_ong])
}

//TEMOS QUE VER SE ESSAS TABELAS SÂO REALMENTE NECESSÁRIAS OU SE PODEMOS FAZER ELAS COMO CAMPOS EM OUTRAS TABELAS
// model NeededItems {}

// model DonationHistory {}

// model Donationoptions {}

model SysLogs {
  //CAMPOS DA TABELA
  log_time DateTime @id @default(now())
  //TODO---TERMINAR TABELA SYSLOGS

  //RELAÇÕES
}

//=======================

//=========ENUMS=========

enum UserType {
  voluntier
  ong
  ongAssociated
  admin
}

enum Permissions {
  donation
  data
}

enum Habilities_User {
  Violao
  Desenhista
  Maquiagem
  Professor
  TI
  Baba
  Cozinheiro
  //precisamos de mais umas 100 kk
}

enum Themes_ONG {
  Animais
  Necessitados
  Criancas
  //precisamos de mais 100 aqui tb
}

//=======================




